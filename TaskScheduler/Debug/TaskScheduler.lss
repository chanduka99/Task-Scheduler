
TaskScheduler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002a8  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800104  00800104  00000340  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a28  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074b  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000436  00000000  00000000  00001593  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  000019cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f4  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027e  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000214e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 32       	cpi	r26, 0x2C	; 44
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 02 01 	call	0x204	; 0x204 <main>
  9e:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Task1>:
	{
		if( task_list[i].id == id )
		return task_list[i].status;
	}
	return ERROR;
}
  a6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <status.1686>
  aa:	81 30       	cpi	r24, 0x01	; 1
  ac:	11 f4       	brne	.+4      	; 0xb2 <Task1+0xc>
  ae:	5a 9a       	sbi	0x0b, 2	; 11
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <Task1+0xe>
  b2:	5a 98       	cbi	0x0b, 2	; 11
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <status.1686>
  ba:	91 11       	cpse	r25, r1
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <status.1686>
  c2:	08 95       	ret

000000c4 <Task2>:
  c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <status.1690>
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	11 f4       	brne	.+4      	; 0xd0 <Task2+0xc>
  cc:	5b 9a       	sbi	0x0b, 3	; 11
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <Task2+0xe>
  d0:	5b 98       	cbi	0x0b, 3	; 11
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <status.1690>
  d8:	91 11       	cpse	r25, r1
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <status.1690>
  e0:	08 95       	ret

000000e2 <Task3>:
  e2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <status.1694>
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	11 f4       	brne	.+4      	; 0xee <Task3+0xc>
  ea:	5c 9a       	sbi	0x0b, 4	; 11
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <Task3+0xe>
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <status.1694>
  f6:	91 11       	cpse	r25, r1
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <status.1694>
  fe:	08 95       	ret

00000100 <Task4>:
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	11 f4       	brne	.+4      	; 0x10c <Task4+0xc>
 108:	5d 9a       	sbi	0x0b, 5	; 11
 10a:	01 c0       	rjmp	.+2      	; 0x10e <Task4+0xe>
 10c:	5d 98       	cbi	0x0b, 5	; 11
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 114:	91 11       	cpse	r25, r1
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 11c:	08 95       	ret

0000011e <initScheduler>:
 11e:	87 ef       	ldi	r24, 0xF7	; 247
 120:	92 ec       	ldi	r25, 0xC2	; 194
 122:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 126:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 12a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 12e:	e1 e8       	ldi	r30, 0x81	; 129
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	85 60       	ori	r24, 0x05	; 5
 136:	80 83       	st	Z, r24
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	8a b9       	out	0x0a, r24	; 10
 142:	e4 e0       	ldi	r30, 0x04	; 4
 144:	f1 e0       	ldi	r31, 0x01	; 1
 146:	2c e2       	ldi	r18, 0x2C	; 44
 148:	31 e0       	ldi	r19, 0x01	; 1
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	10 82       	st	Z, r1
 14e:	12 82       	std	Z+2, r1	; 0x02
 150:	11 82       	std	Z+1, r1	; 0x01
 152:	14 82       	std	Z+4, r1	; 0x04
 154:	13 82       	std	Z+3, r1	; 0x03
 156:	16 82       	std	Z+6, r1	; 0x06
 158:	15 82       	std	Z+5, r1	; 0x05
 15a:	87 83       	std	Z+7, r24	; 0x07
 15c:	38 96       	adiw	r30, 0x08	; 8
 15e:	e2 17       	cp	r30, r18
 160:	f3 07       	cpc	r31, r19
 162:	a1 f7       	brne	.-24     	; 0x14c <initScheduler+0x2e>
 164:	08 95       	ret

00000166 <addTask>:
 166:	a4 e0       	ldi	r26, 0x04	; 4
 168:	b1 e0       	ldi	r27, 0x01	; 1
 16a:	20 e0       	ldi	r18, 0x00	; 0
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	f9 01       	movw	r30, r18
 170:	17 96       	adiw	r26, 0x07	; 7
 172:	9c 91       	ld	r25, X
 174:	17 97       	sbiw	r26, 0x07	; 7
 176:	92 30       	cpi	r25, 0x02	; 2
 178:	89 f4       	brne	.+34     	; 0x19c <addTask+0x36>
 17a:	ee 0f       	add	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	ee 0f       	add	r30, r30
 180:	ff 1f       	adc	r31, r31
 182:	ee 0f       	add	r30, r30
 184:	ff 1f       	adc	r31, r31
 186:	ec 5f       	subi	r30, 0xFC	; 252
 188:	fe 4f       	sbci	r31, 0xFE	; 254
 18a:	80 83       	st	Z, r24
 18c:	72 83       	std	Z+2, r23	; 0x02
 18e:	61 83       	std	Z+1, r22	; 0x01
 190:	54 83       	std	Z+4, r21	; 0x04
 192:	43 83       	std	Z+3, r20	; 0x03
 194:	56 83       	std	Z+6, r21	; 0x06
 196:	45 83       	std	Z+5, r20	; 0x05
 198:	17 82       	std	Z+7, r1	; 0x07
 19a:	08 95       	ret
 19c:	2f 5f       	subi	r18, 0xFF	; 255
 19e:	3f 4f       	sbci	r19, 0xFF	; 255
 1a0:	18 96       	adiw	r26, 0x08	; 8
 1a2:	25 30       	cpi	r18, 0x05	; 5
 1a4:	31 05       	cpc	r19, r1
 1a6:	19 f7       	brne	.-58     	; 0x16e <addTask+0x8>
 1a8:	08 95       	ret

000001aa <dispatchTasks>:

// Dispatches tasks when they are ready to run
void dispatchTasks(void)
{
 1aa:	df 92       	push	r13
 1ac:	ef 92       	push	r14
 1ae:	ff 92       	push	r15
 1b0:	0f 93       	push	r16
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	c4 e0       	ldi	r28, 0x04	; 4
 1ba:	d1 e0       	ldi	r29, 0x01	; 1
 1bc:	0f 2e       	mov	r0, r31
 1be:	fc e2       	ldi	r31, 0x2C	; 44
 1c0:	ef 2e       	mov	r14, r31
 1c2:	f1 e0       	ldi	r31, 0x01	; 1
 1c4:	ff 2e       	mov	r15, r31
 1c6:	f0 2d       	mov	r31, r0
	for(uint8_t i=0;i<MAX_TASKS;i++)
	{
		// Check for a valid task ready to run
		if( !task_list[i].delay && task_list[i].status == RUNNABLE )
		{
			task_list[i].status = RUNNING;				// Task is now running
 1c8:	dd 24       	eor	r13, r13
 1ca:	d3 94       	inc	r13
void dispatchTasks(void)
{
	for(uint8_t i=0;i<MAX_TASKS;i++)
	{
		// Check for a valid task ready to run
		if( !task_list[i].delay && task_list[i].status == RUNNABLE )
 1cc:	8b 81       	ldd	r24, Y+3	; 0x03
 1ce:	9c 81       	ldd	r25, Y+4	; 0x04
 1d0:	89 2b       	or	r24, r25
 1d2:	61 f4       	brne	.+24     	; 0x1ec <dispatchTasks+0x42>
 1d4:	8f 81       	ldd	r24, Y+7	; 0x07
 1d6:	81 11       	cpse	r24, r1
 1d8:	09 c0       	rjmp	.+18     	; 0x1ec <dispatchTasks+0x42>
		{
			task_list[i].status = RUNNING;				// Task is now running
 1da:	df 82       	std	Y+7, r13	; 0x07
			(*task_list[i].task)();						// Call the task
 1dc:	e9 81       	ldd	r30, Y+1	; 0x01
 1de:	fa 81       	ldd	r31, Y+2	; 0x02
 1e0:	09 95       	icall
			task_list[i].delay = task_list[i].period;	// Reset the delay
 1e2:	8d 81       	ldd	r24, Y+5	; 0x05
 1e4:	9e 81       	ldd	r25, Y+6	; 0x06
 1e6:	9c 83       	std	Y+4, r25	; 0x04
 1e8:	8b 83       	std	Y+3, r24	; 0x03
			task_list[i].status = RUNNABLE;				// Task is runnable again
 1ea:	1f 82       	std	Y+7, r1	; 0x07
 1ec:	28 96       	adiw	r28, 0x08	; 8
}

// Dispatches tasks when they are ready to run
void dispatchTasks(void)
{
	for(uint8_t i=0;i<MAX_TASKS;i++)
 1ee:	ce 15       	cp	r28, r14
 1f0:	df 05       	cpc	r29, r15
 1f2:	61 f7       	brne	.-40     	; 0x1cc <dispatchTasks+0x22>
			(*task_list[i].task)();						// Call the task
			task_list[i].delay = task_list[i].period;	// Reset the delay
			task_list[i].status = RUNNABLE;				// Task is runnable again
		}
	}
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	1f 91       	pop	r17
 1fa:	0f 91       	pop	r16
 1fc:	ff 90       	pop	r15
 1fe:	ef 90       	pop	r14
 200:	df 90       	pop	r13
 202:	08 95       	ret

00000204 <main>:
tcb_t task_list[MAX_TASKS];		// Define task list
uint16_t count = 0;				// Keeps track of number of timer interrupts

int main(void)
{
	initScheduler();		// Set up the task list
 204:	0e 94 8f 00 	call	0x11e	; 0x11e <initScheduler>
	
	//Add tasks
	addTask(1, Task1, 1);	// Task1 runs every 1 second
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	50 e0       	ldi	r21, 0x00	; 0
 20c:	63 e5       	ldi	r22, 0x53	; 83
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 b3 00 	call	0x166	; 0x166 <addTask>
	addTask(2, Task2, 2);	// Task2 runs every 2 seconds
 216:	42 e0       	ldi	r20, 0x02	; 2
 218:	50 e0       	ldi	r21, 0x00	; 0
 21a:	62 e6       	ldi	r22, 0x62	; 98
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	82 e0       	ldi	r24, 0x02	; 2
 220:	0e 94 b3 00 	call	0x166	; 0x166 <addTask>
	addTask(3, Task3, 3);	// Task3 runs every 3 seconds
 224:	43 e0       	ldi	r20, 0x03	; 3
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	61 e7       	ldi	r22, 0x71	; 113
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	83 e0       	ldi	r24, 0x03	; 3
 22e:	0e 94 b3 00 	call	0x166	; 0x166 <addTask>
	addTask(4, Task4, 6);	// Task4 runs every 6 seconds
 232:	46 e0       	ldi	r20, 0x06	; 6
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	60 e8       	ldi	r22, 0x80	; 128
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	84 e0       	ldi	r24, 0x04	; 4
 23c:	0e 94 b3 00 	call	0x166	; 0x166 <addTask>
	
	sei();	// Enable all interrupts
 240:	78 94       	sei
	
	while(1)
	{
		dispatchTasks();
 242:	0e 94 d5 00 	call	0x1aa	; 0x1aa <dispatchTasks>
 246:	fd cf       	rjmp	.-6      	; 0x242 <main+0x3e>

00000248 <__vector_13>:

/* ------------------------------- ISR ----------------------------------- */
// Generate "ticks"
// Each tick 1s apart
ISR(TIMER1_OVF_vect)
{
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	2f 93       	push	r18
 254:	3f 93       	push	r19
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	ef 93       	push	r30
 25c:	ff 93       	push	r31
	TCNT1 = 0xC2F7;					// Reset Timer1 to 0xC2F7 (1 sec)
 25e:	87 ef       	ldi	r24, 0xF7	; 247
 260:	92 ec       	ldi	r25, 0xC2	; 194
 262:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 266:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TIFR1 = 0x01;					// Clear overflow flag
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	86 bb       	out	0x16, r24	; 22
 26e:	e4 e0       	ldi	r30, 0x04	; 4
 270:	f1 e0       	ldi	r31, 0x01	; 1
 272:	2c e2       	ldi	r18, 0x2C	; 44
 274:	31 e0       	ldi	r19, 0x01	; 1
	for(uint8_t i=0;i<MAX_TASKS;i++)
	{
		if( task_list[i].status == RUNNABLE )
 276:	87 81       	ldd	r24, Z+7	; 0x07
 278:	81 11       	cpse	r24, r1
 27a:	05 c0       	rjmp	.+10     	; 0x286 <__vector_13+0x3e>
		task_list[i].delay--;
 27c:	83 81       	ldd	r24, Z+3	; 0x03
 27e:	94 81       	ldd	r25, Z+4	; 0x04
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	94 83       	std	Z+4, r25	; 0x04
 284:	83 83       	std	Z+3, r24	; 0x03
 286:	38 96       	adiw	r30, 0x08	; 8
// Each tick 1s apart
ISR(TIMER1_OVF_vect)
{
	TCNT1 = 0xC2F7;					// Reset Timer1 to 0xC2F7 (1 sec)
	TIFR1 = 0x01;					// Clear overflow flag
	for(uint8_t i=0;i<MAX_TASKS;i++)
 288:	e2 17       	cp	r30, r18
 28a:	f3 07       	cpc	r31, r19
 28c:	a1 f7       	brne	.-24     	; 0x276 <__vector_13+0x2e>
	{
		if( task_list[i].status == RUNNABLE )
		task_list[i].delay--;
	}
}
 28e:	ff 91       	pop	r31
 290:	ef 91       	pop	r30
 292:	9f 91       	pop	r25
 294:	8f 91       	pop	r24
 296:	3f 91       	pop	r19
 298:	2f 91       	pop	r18
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>
